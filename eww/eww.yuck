(defpoll wifistat :interval "1s"
"scripts/wifi")

(defpoll brightness :interval "1s" 
"scripts/bright")

(defpoll vol :interval "1s"
"scripts/getvol")

(defpoll getmedia :interval "1s"
"scripts/getmedia")

(defpoll time :interval "1s"
"date '+%H:%M:%S'")

(defpoll battstatus :interval "20s"
"scripts/battery battstatus")

(defpoll battprcnt :interval "20s"
"scripts/battery battprcnt")

(defpoll playpause :interval "1s"
"scripts/music")

;;=================================================================;;
;;===================		Bar		===================;;
;;=================================================================;;

(defwindow bar
:monitor 0
:exclusive true
:wm-ignore true
:stacking "bg"
:geometry (geometry :x "0px" :y "8px" :width "1900px" :height "38px" :anchor "top center")
	(widgets))

(defwidget widgets []
(box :space-evenly false :hexpand false :spacing 5 :class "widgets"
	(widgets_left)
	(widgets_right)))

(defwidget widgets_left []
(box :orientation "h" :space-evenly false :hexpand true :spacing 5
	(left)
	(musictrl)
	(music)))

(defwidget widgets_right []
(box :orientation "h" :space-evenly false :hexpand false :spacing 5
	(wifi)
	(metrics)
	(right)))

(defwidget right []
(box :class "time" :orientation "h" :space-evenly false :spacing 8 :hexpand false
time))

(defwidget metrics []
(box :class "metrics" :hexpand false :space-evenly false :spacing 15 :tooltip "metrics"
	(label :text "${vol}")
	(label :text "${brightness}")
	(label :text " ${round(EWW_CPU.avg, 0)}%")
	(label :text " ${round(EWW_RAM.used_mem_perc, 0)}%")
	(label :text "${battstatus} ${battprcnt}")))

(defwidget wifi []
(box :class "metrics" :hexpand false
(label :text "${wifistat}")))

(defwidget musictrl []
(box :class "msctrl" :spacing 15 :space-evenly true
(button :onclick "playerctl previous" "")
(button :onclick "playerctl play-pause" "${playpause}")
(button :onclick "playerctl next" "")))

(defwidget music []
(box :class "music" :orientation "h" :hexpand "true"
(label :text "${getmedia}")))

(defwidget left []
(box :class "menu" :orientation "h" :space-evenly true :hexpand "false" :spacing 15
(button :onclick "poweroff" "")
(button :onclick "reboot" "")
(button :onclick "(dolphin ~)" "")))


;;=================================================================;;
;;===================		Bar2		===================;;
;;=================================================================;;

(defwindow bar2
:monitor 0
:exclusive true
:wm-ignore true
:stacking "fg"
:geometry (geometry :x "0px" :y "8px" :width "1900px" :height "38px" :anchor "bottom center")
	(bar))

(defwidget bar []
(box :class "bar2" :orientation "h"
(bar2)))

(defwidget bar2 []
(box :class "ws" :orientation "h" :vexpand false :space-evenly false :halign "center" :spacing 20
(button :onclick "(hyprctl dispatch workspace 1)" "1")
(button :onclick "(hyprctl dispatch workspace 2)" "2")
(button :onclick "(hyprctl dispatch workspace 3)" "3")
(button :onclick "(hyprctl dispatch workspace 4)" "4")
(button :onclick "(hyprctl dispatch workspace 5)" "5")
(button :onclick "(hyprctl dispatch workspace 6)" "6")
(button :onclick "(hyprctl dispatch workspace 7)" "7")
(button :onclick "(hyprctl dispatch workspace 8)" "8")
(button :onclick "(hyprctl dispatch workspace 9)" "9")))
